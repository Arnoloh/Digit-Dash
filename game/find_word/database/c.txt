C


int estPair(int n) 
{
    if (n%2 == 0) 
    { 
        return 1; 
    } else 
    { 
        return 0; 
    } 
}

int sommeTableau(int tableau[], int taille) 
{
    int somme = 0; 
    for( int i = 0; i < taille; i++) 
    { 
        somme += tableau[i]; 
    } 
    return somme; 
} 

void inverserChaine(char chaine[]) 
{
    int longueur = strlen(chaine); 
    for (int i = 0; i < longueur/2; i++) 
    { 
        char temp = chaine[i]; 
        chaine[i] = chaine[longueur-i-1]; 
        chaine[longueur-i-1] = temp; 
    } 
} 

int binary_to_decimal(char *binary) 
{
    int decimal = 0;
    int len = strlen(binary);
    for (int i = 0; i < len; i++) 
    {
        decimal = decimal*2 + (binary[i]-'0');
    }
    return decimal;
}

void decimal_to_binary(int decimal, char *binary) 
{
    if (decimal == 0) 
    {
        strcpy(binary,"0");
        return;
    }
    int i = 0;
    while (decimal > 0) 
    {
        binary[i++] = decimal%2 + '0';
        decimal /= 2;
    }
    binary[i] = '\0';
    strrev(binary);
}

int is_prime(int n) 
{
    if (n<2) 
    {
        return 0;
    }
    int sqrt_n = sqrt(n);
    for (int i = 2; i <= sqrt_n; i++) 
    {
        if (n%i == 0) 
        {
            return 0;
        }
    }
    return 1;
}

void count_words(char *text, int *counts, int len) 
{
    char *word;
    while ((word = strsep(&text, "a")) != NULL) 
    {
        if (strlen(word) > 0) {
            int i;
            for (i = 0; i<len; i++) 
            {
                if (strcmp(word, counts[i].word) == 0) 
                {
                    counts[i].count++;
                    break;
                }
                if (counts[i].word[0] == '\0') 
                {
                    strcpy(counts[i].word, word);
                    counts[i].count = 1;
                    break;
                }
            }
            if (i == len) 
            {
                printf("Nombre maximal de mots atteint.\n");
                return;
            }
        }
    }
}

float moyenne(int tableau[], int taille) 
{
    int somme = 0; 
    for (int i=0; i < taille; i++) 
    {
        somme += tableau[i];
    }
    return (float) somme / taille;
}

void trier(int tableau[], int taille) 
{
    int temp;
    for (int i = 0; i < taille-1; i++) 
    {
        for (int j = i + 1; j < taille; j++) 
        {
            if (tableau[i] > tableau[j]) 
            {
                temp = tableau[i];
                tableau[i] = tableau[j];
                tableau[j] = temp;
            }
        }
    }
}

int chaine_vers_entier(char chaine[]) 
{
    int resultat = 0;
    int i = 0;
    while (chaine[i] != '\0') 
    {
        resultat = resultat * 10 + (chaine[i] - '0');
        i++;
    }
    return resultat;
}

void afficher_matrice(int matrice[][3], int lignes, int colonnes) 
{
    for (int i = 0; i < lignes; i++) 
    {
        for (int j = 0; j < colonnes; j++) 
        {
            printf("%d ", matrice[i][j]);
        }
        printf("\n");
    }
}

double racine_carree(double nombre) 
{
    double resultat = nombre / 2;
    double precision = 0.00001;
    while (fabs(resultat * resultat - nombre) > precision) 
    {
        resultat = (resultat + nombre / resultat) / 2.0;
    }
    return resultat;
}